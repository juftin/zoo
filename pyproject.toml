[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = "Justin Flannery", email = "juftin@juftin.com"}
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]
dependencies = [
  "fastapi~=0.109.2",
  "fastapi-users[sqlalchemy]~=14.0.1",
  "pydantic[email]~=2.11.7",
  "pydantic-settings~=2.1.0",
  "pydantic-extra-types~=2.5.0",
  "sqlalchemy[asyncio]~=2.0.27",
  "aiosqlite~=0.19.0",
  "asyncpg~=0.30.0",
  "greenlet~=3.2.4",
  "uvicorn[standard]~=0.27.1",
  "gunicorn~=21.2.0",
  "alembic~=1.13.1",
  "httpx~=0.26.0",
  "rich~=13.7.0",
  "click~=8.1.7",
  # https://github.com/fastapi-users/fastapi-users/issues/1301
  "setuptools; python_version == '3.12'"
]
description = "An asynchronous zoo API, powered by FastAPI and SQLModel"
keywords = [
  "fastapi",
  "sqlalchemy",
  "async",
  "alembic"
]
license = "MIT"
name = "zoo"
readme = "README.md"
requires-python = ">=3.9"
version = "0.5.0"

[project.urls]
Documentation = "https://github.com/juftin/zoo#readme"
Issues = "https://github.com/juftin/zoo/issues"
Source = "https://github.com/juftin/zoo"

[dependency-groups]
dev = [
  "pytest",
  "pytest-cov",
  "mypy>=1.6.1",
  "ruff~=0.1.14"
]
docs = [
  "markdown-callouts",
  "markdown-exec",
  "mkdocs",
  "mkdocs-autorefs",
  "mkdocs-gen-files",
  "mkdocs-literate-nav",
  "mkdocs-material",
  "mkdocs-section-index",
  "mkdocstrings",
  "mkdocstrings-python",
  "pymdown-extensions"
]

[tool.coverage.paths]
tests = ["tests", "*/zoo/tests"]
zoo = ["zoo", "*/zoo/zoo"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]
show_missing = true

[tool.coverage.run]
branch = true
omit = [
  "zoo/__init__.py",
  "zoo/__main__.py",
  "migrations/**"
]
parallel = true
source_pkgs = ["zoo", "tests"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.ruff]
ignore = [
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Boolean-typed positional argument in function definition
  "FBT001",
  # Boolean default positional argument in function definition
  "FBT002",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Exception must not use a string literal, assign to variable first
  "EM101",
  # Ignore Depends on FastAPI
  "B008"
]
line-length = 88
select = [
  "A",  # flake8-builtins
  "ARG",  # flake8-unused-arguments
  "B",  # flake8-bugbear
  "C",  # mccabe
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle (Error)
  "EM",  # flake8-errmsg
  "F",  # Pyflakes
  "FBT",  # flake8-boolean-trap
  "I",  # isort
  "ICN",  # flake8-import-conventions
  "N",  # pep8-naming
  "PLC",  # Pylint (Convention message)
  "PLE",  # Pylint (Error message)
  "PLR",  # Pylint (Refactor message)
  "PLW",  # Pylint (Warning message)
  "Q",  # flake8-quotes
  "RUF",  # Ruff-specific rules
  "S",  # flake8-bandit
  "T",  # flake8-debugger (T10) and flake8-print (T20)
  "TID",  # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",  # pycodestyle (Warning)
  "YTT"  # flake8-2020
]
target-version = "py38"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["zoo"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.pydocstyle]
convention = "numpy"
