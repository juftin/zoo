[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = "juftin", email = "juftin@juftin.com"}
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy"
]
dependencies = [
  "fastapi~=0.100.1",
  "sqlmodel==0.0.8",
  "pydantic[email]~=1.10.12",
  # "pydantic==2.1.1", #  TODO: Upgrade to > 1 when SQLModel supports it
  # "pydantic-extra-types~=2.0.0",
  "aiosqlite~=0.19.0",
  "asyncpg~=0.28.0",
  "greenlet~=2.0.2",
  "uvicorn~=0.23.2",
  "gunicorn~=21.2.0",
  "alembic~=1.11.2",
  "httpx~=0.24.1",
  "rich~=13.5.2"
]
description = "An asynchronous zoo API, powered by FastAPI and SQLModel"
dynamic = ["version"]
keywords = [
  "fastapi",
  "sqlmodel",
  "async"
]
license = "MIT"
name = "zoo"
readme = "README.md"
requires-python = ">=3.8"

[project.urls]
Documentation = "https://github.com/juftin/zoo#readme"
Issues = "https://github.com/juftin/zoo/issues"
Source = "https://github.com/juftin/zoo"

[tool.black]
line-length = 100
target-version = ["py37"]

[tool.coverage.paths]
tests = ["tests", "*/zoo/tests"]
zoo = ["zoo", "*/zoo/zoo"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]

[tool.coverage.run]
branch = true
omit = [
  "zoo/__init__.py"
]
parallel = true
source_pkgs = ["zoo"]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.app]
detached = false

[tool.hatch.envs.app.scripts]
container = "docker compose up --build"
container-reset = ["docker compose down", "container"]
migrate = "alembic upgrade head"
reset = ["rm -f zoo/zoo.sqlite", "serve"]
serve = [
  "migrate",
  "uvicorn zoo.app:app --reload --host 0.0.0.0 --port 8000"
]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest"
]
path = ".venv"
post-install-commands = [
  "pre-commit install"
]
pre-install-commands = [
  "pip install -q -r requirements.txt --no-deps"
]
type = "virtual"

[tool.hatch.envs.default.scripts]
cov = [
  "test-cov",
  "cov-report"
]
cov-report = [
  "- coverage combine",
  "coverage report"
]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs~=1.5.2",
  "mkdocs-material~=9.1.21",
  "mkdocstrings~=0.22.0",
  "markdown-exec[ansi]~=1.6.0"
]
detached = true

[tool.hatch.envs.docs.scripts]
build = ["hatch run gen:docs", "mkdocs build --clean --strict"]
deploy = ["hatch run gen:docs", "mkdocs gh-deploy {args:}"]
serve = ["hatch run gen:docs", "mkdocs serve --dev-addr localhost:8080 --livereload"]

[tool.hatch.envs.gen]
dependencies = [
  "pip-tools~=7.1.0"
]
detached = false

[tool.hatch.envs.gen.scripts]
all = ["docs"]
clients = ["py", "ts"]
docs = ["openapi"]
openapi = "python -m zoo.app --openapi"
py = [
  "rm -rf ./dist/clients/python",
  """
          docker run --rm -v ./:/local openapitools/openapi-generator-cli generate \
            -i /local/docs/openapi.json \
            -g python \
            -o /local/dist/clients/python
          """
]
release = [
  "npm install --prefix .github/semantic_release/",
  "npx --prefix .github/semantic_release/ semantic-release {args:}"
]
reqs = "pip-compile {args:} --generate-hashes --output-file requirements.txt"
reqs-update = "compile --upgrade"
ts = ["rm -rf ./dist/clients/ts", "npx openapi --input ./docs/openapi.json --output ./dist/clients/ts"]

[tool.hatch.envs.lint]
dependencies = [
  "black~=23.7.0",
  "mypy~=1.4.1",
  "ruff~=0.0.281"
]
detached = false

[tool.hatch.envs.lint.scripts]
all = [
  "fmt",
  "typing"
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style"
]
precommit = [
  "pre-commit run --all-files"
]
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}"
]
typing = "mypy --install-types --non-interactive {args:zoo tests migrations}"

[tool.hatch.version]
path = "zoo/_version.py"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "pytest.*"
]

[tool.ruff]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Ignore Depends on FastAPI
  "B008"
]
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT"
]
target-version = "py38"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true  # *args, **kwargs

[tool.ruff.isort]
known-first-party = ["zoo"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.pydocstyle]
convention = "numpy"
